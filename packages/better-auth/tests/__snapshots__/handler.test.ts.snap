// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`index > should return 403 with status text csrf token is invalid 1`] = `
{
  "status": 403,
  "statusText": "Invalid CSRF Token",
}
`;

exports[`index > should return 404 with status text not found 1`] = `
{
  "status": 404,
  "statusText": "Not Found",
}
`;

exports[`to context > should ignore the request url for the baseURL passed in options 1`] = `
{
  "_db": {
    "create": [Function],
    "delete": [Function],
    "findMany": [Function],
    "findOne": [Function],
    "update": [Function],
  },
  "account": {
    "additionalFields": {},
    "modelName": "account",
    "selectFields": [
      "userId",
      "providerId",
      "accountId",
    ],
  },
  "adapter": {
    "createSession": [Function],
    "createUser": [Function],
    "deleteSession": [Function],
    "findAccount": [Function],
    "findSession": [Function],
    "findUserByEmail": [Function],
    "findUserById": [Function],
    "linkAccount": [Function],
    "updateSession": [Function],
    "updateUserByEmail": [Function],
  },
  "basePath": "/api/auth",
  "baseURL": "https://better-auth.com",
  "cookies": {
    "csrfToken": {
      "name": "better-auth.csrf_token",
      "options": {
        "httpOnly": true,
        "path": "/",
        "sameSite": "lax",
        "secure": false,
      },
    },
    "nonce": {
      "name": "better-auth.nonce",
      "options": {
        "httpOnly": true,
        "maxAge": 900,
        "path": "/",
        "sameSite": "lax",
        "secure": false,
      },
    },
    "pkCodeVerifier": {
      "name": "better-auth.pk_code_verifier",
      "options": {
        "httpOnly": true,
        "maxAge": 900,
        "path": "/",
        "sameSite": "lax",
        "secure": false,
      },
    },
    "sessionToken": {
      "name": "better-auth.session_token",
      "options": {
        "httpOnly": true,
        "maxAge": 604800000,
        "path": "/",
        "sameSite": "lax",
        "secure": false,
      },
    },
    "state": {
      "name": "better-auth.state",
      "options": {
        "httpOnly": true,
        "maxAge": 900,
        "path": "/",
        "sameSite": "lax",
        "secure": false,
      },
    },
  },
  "disableCSRF": false,
  "plugins": [
    {
      "handler": [Function],
      "hooks": {
        "before": [Function],
        "matcher": [Function],
      },
      "id": "csrf",
      "name": "CSRF Check",
      "version": "1.0.0",
    },
  ],
  "providers": [],
  "request": {
    "action": "signin",
    "body": {
      "provider": "github",
    },
    "cookies": {
      "get": [Function],
      "set": [Function],
    },
    "headers": Headers {
      Symbol(entries): {
        "content-type": {
          "name": "Content-Type",
          "value": [
            "text/plain;charset=UTF-8",
          ],
        },
      },
    },
    "method": "POST",
    "query": {},
    "url": "https://better-auth.com/api/auth",
  },
  "secret": "better-auth-secret-key-123456789",
  "session": {
    "additionalFields": {},
    "expiresIn": 604800000,
    "modelName": "session",
    "selectFields": [
      "id",
      "userId",
      "expiresAt",
    ],
    "updateAge": 86400000,
  },
  "sessionAdapter": undefined,
  "user": {
    "fields": {
      "email": {
        "hashValue": false,
        "required": true,
        "returned": true,
        "validator": ZodEffects {
          "_def": {
            "description": undefined,
            "effect": {
              "transform": [Function],
              "type": "transform",
            },
            "errorMap": [Function],
            "schema": ZodString {
              "_def": {
                "checks": [],
                "coerce": false,
                "typeName": "ZodString",
              },
              "and": [Function],
              "array": [Function],
              "brand": [Function],
              "catch": [Function],
              "default": [Function],
              "describe": [Function],
              "isNullable": [Function],
              "isOptional": [Function],
              "nullable": [Function],
              "nullish": [Function],
              "optional": [Function],
              "or": [Function],
              "parse": [Function],
              "parseAsync": [Function],
              "pipe": [Function],
              "promise": [Function],
              "readonly": [Function],
              "refine": [Function],
              "refinement": [Function],
              "safeParse": [Function],
              "safeParseAsync": [Function],
              "spa": [Function],
              "superRefine": [Function],
              "transform": [Function],
            },
            "typeName": "ZodEffects",
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "default": [Function],
          "describe": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "promise": [Function],
          "readonly": [Function],
          "refine": [Function],
          "refinement": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
        },
      },
      "emailVerified": {
        "hashValue": false,
        "required": true,
        "returned": true,
        "validator": ZodEffects {
          "_def": {
            "description": undefined,
            "effect": {
              "transform": [Function],
              "type": "transform",
            },
            "errorMap": [Function],
            "schema": ZodBoolean {
              "_def": {
                "coerce": false,
                "typeName": "ZodBoolean",
              },
              "and": [Function],
              "array": [Function],
              "brand": [Function],
              "catch": [Function],
              "default": [Function],
              "describe": [Function],
              "isNullable": [Function],
              "isOptional": [Function],
              "nullable": [Function],
              "nullish": [Function],
              "optional": [Function],
              "or": [Function],
              "parse": [Function],
              "parseAsync": [Function],
              "pipe": [Function],
              "promise": [Function],
              "readonly": [Function],
              "refine": [Function],
              "refinement": [Function],
              "safeParse": [Function],
              "safeParseAsync": [Function],
              "spa": [Function],
              "superRefine": [Function],
              "transform": [Function],
            },
            "typeName": "ZodEffects",
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "default": [Function],
          "describe": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "promise": [Function],
          "readonly": [Function],
          "refine": [Function],
          "refinement": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
        },
      },
      "image": {
        "hashValue": false,
        "required": false,
        "returned": true,
        "validator": ZodEffects {
          "_def": {
            "description": undefined,
            "effect": {
              "transform": [Function],
              "type": "transform",
            },
            "errorMap": [Function],
            "schema": ZodString {
              "_def": {
                "checks": [],
                "coerce": false,
                "typeName": "ZodString",
              },
              "and": [Function],
              "array": [Function],
              "brand": [Function],
              "catch": [Function],
              "default": [Function],
              "describe": [Function],
              "isNullable": [Function],
              "isOptional": [Function],
              "nullable": [Function],
              "nullish": [Function],
              "optional": [Function],
              "or": [Function],
              "parse": [Function],
              "parseAsync": [Function],
              "pipe": [Function],
              "promise": [Function],
              "readonly": [Function],
              "refine": [Function],
              "refinement": [Function],
              "safeParse": [Function],
              "safeParseAsync": [Function],
              "spa": [Function],
              "superRefine": [Function],
              "transform": [Function],
            },
            "typeName": "ZodEffects",
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "default": [Function],
          "describe": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "promise": [Function],
          "readonly": [Function],
          "refine": [Function],
          "refinement": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
        },
      },
      "name": {
        "hashValue": false,
        "required": true,
        "returned": true,
        "validator": ZodEffects {
          "_def": {
            "description": undefined,
            "effect": {
              "transform": [Function],
              "type": "transform",
            },
            "errorMap": [Function],
            "schema": ZodString {
              "_def": {
                "checks": [],
                "coerce": false,
                "typeName": "ZodString",
              },
              "and": [Function],
              "array": [Function],
              "brand": [Function],
              "catch": [Function],
              "default": [Function],
              "describe": [Function],
              "isNullable": [Function],
              "isOptional": [Function],
              "nullable": [Function],
              "nullish": [Function],
              "optional": [Function],
              "or": [Function],
              "parse": [Function],
              "parseAsync": [Function],
              "pipe": [Function],
              "promise": [Function],
              "readonly": [Function],
              "refine": [Function],
              "refinement": [Function],
              "safeParse": [Function],
              "safeParseAsync": [Function],
              "spa": [Function],
              "superRefine": [Function],
              "transform": [Function],
            },
            "typeName": "ZodEffects",
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "default": [Function],
          "describe": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "promise": [Function],
          "readonly": [Function],
          "refine": [Function],
          "refinement": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
        },
      },
    },
    "modelName": "user",
    "selectFields": [
      "id",
      "email",
      "emailVerified",
      "email",
      "emailVerified",
      "image",
      "name",
    ],
  },
}
`;

exports[`to context > should ignore the request url for the baseURL passed in process.env.BETTER_AUTH_URL 1`] = `
{
  "_db": {
    "create": [Function],
    "delete": [Function],
    "findMany": [Function],
    "findOne": [Function],
    "update": [Function],
  },
  "account": {
    "additionalFields": {},
    "modelName": "account",
    "selectFields": [
      "userId",
      "providerId",
      "accountId",
    ],
  },
  "adapter": {
    "createSession": [Function],
    "createUser": [Function],
    "deleteSession": [Function],
    "findAccount": [Function],
    "findSession": [Function],
    "findUserByEmail": [Function],
    "findUserById": [Function],
    "linkAccount": [Function],
    "updateSession": [Function],
    "updateUserByEmail": [Function],
  },
  "basePath": "/api/auth",
  "baseURL": "https://better-auth.com",
  "cookies": {
    "csrfToken": {
      "name": "better-auth.csrf_token",
      "options": {
        "httpOnly": true,
        "path": "/",
        "sameSite": "lax",
        "secure": false,
      },
    },
    "nonce": {
      "name": "better-auth.nonce",
      "options": {
        "httpOnly": true,
        "maxAge": 900,
        "path": "/",
        "sameSite": "lax",
        "secure": false,
      },
    },
    "pkCodeVerifier": {
      "name": "better-auth.pk_code_verifier",
      "options": {
        "httpOnly": true,
        "maxAge": 900,
        "path": "/",
        "sameSite": "lax",
        "secure": false,
      },
    },
    "sessionToken": {
      "name": "better-auth.session_token",
      "options": {
        "httpOnly": true,
        "maxAge": 604800000,
        "path": "/",
        "sameSite": "lax",
        "secure": false,
      },
    },
    "state": {
      "name": "better-auth.state",
      "options": {
        "httpOnly": true,
        "maxAge": 900,
        "path": "/",
        "sameSite": "lax",
        "secure": false,
      },
    },
  },
  "disableCSRF": false,
  "plugins": [
    {
      "handler": [Function],
      "hooks": {
        "before": [Function],
        "matcher": [Function],
      },
      "id": "csrf",
      "name": "CSRF Check",
      "version": "1.0.0",
    },
  ],
  "providers": [],
  "request": {
    "action": "signin",
    "body": {
      "provider": "github",
    },
    "cookies": {
      "get": [Function],
      "set": [Function],
    },
    "headers": Headers {
      Symbol(entries): {
        "content-type": {
          "name": "Content-Type",
          "value": [
            "text/plain;charset=UTF-8",
          ],
        },
      },
    },
    "method": "POST",
    "query": {},
    "url": "https://better-auth.com/api/auth",
  },
  "secret": "better-auth-secret-key-123456789",
  "session": {
    "additionalFields": {},
    "expiresIn": 604800000,
    "modelName": "session",
    "selectFields": [
      "id",
      "userId",
      "expiresAt",
    ],
    "updateAge": 86400000,
  },
  "sessionAdapter": undefined,
  "user": {
    "fields": {
      "email": {
        "hashValue": false,
        "required": true,
        "returned": true,
        "validator": ZodEffects {
          "_def": {
            "description": undefined,
            "effect": {
              "transform": [Function],
              "type": "transform",
            },
            "errorMap": [Function],
            "schema": ZodString {
              "_def": {
                "checks": [],
                "coerce": false,
                "typeName": "ZodString",
              },
              "and": [Function],
              "array": [Function],
              "brand": [Function],
              "catch": [Function],
              "default": [Function],
              "describe": [Function],
              "isNullable": [Function],
              "isOptional": [Function],
              "nullable": [Function],
              "nullish": [Function],
              "optional": [Function],
              "or": [Function],
              "parse": [Function],
              "parseAsync": [Function],
              "pipe": [Function],
              "promise": [Function],
              "readonly": [Function],
              "refine": [Function],
              "refinement": [Function],
              "safeParse": [Function],
              "safeParseAsync": [Function],
              "spa": [Function],
              "superRefine": [Function],
              "transform": [Function],
            },
            "typeName": "ZodEffects",
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "default": [Function],
          "describe": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "promise": [Function],
          "readonly": [Function],
          "refine": [Function],
          "refinement": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
        },
      },
      "emailVerified": {
        "hashValue": false,
        "required": true,
        "returned": true,
        "validator": ZodEffects {
          "_def": {
            "description": undefined,
            "effect": {
              "transform": [Function],
              "type": "transform",
            },
            "errorMap": [Function],
            "schema": ZodBoolean {
              "_def": {
                "coerce": false,
                "typeName": "ZodBoolean",
              },
              "and": [Function],
              "array": [Function],
              "brand": [Function],
              "catch": [Function],
              "default": [Function],
              "describe": [Function],
              "isNullable": [Function],
              "isOptional": [Function],
              "nullable": [Function],
              "nullish": [Function],
              "optional": [Function],
              "or": [Function],
              "parse": [Function],
              "parseAsync": [Function],
              "pipe": [Function],
              "promise": [Function],
              "readonly": [Function],
              "refine": [Function],
              "refinement": [Function],
              "safeParse": [Function],
              "safeParseAsync": [Function],
              "spa": [Function],
              "superRefine": [Function],
              "transform": [Function],
            },
            "typeName": "ZodEffects",
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "default": [Function],
          "describe": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "promise": [Function],
          "readonly": [Function],
          "refine": [Function],
          "refinement": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
        },
      },
      "image": {
        "hashValue": false,
        "required": false,
        "returned": true,
        "validator": ZodEffects {
          "_def": {
            "description": undefined,
            "effect": {
              "transform": [Function],
              "type": "transform",
            },
            "errorMap": [Function],
            "schema": ZodString {
              "_def": {
                "checks": [],
                "coerce": false,
                "typeName": "ZodString",
              },
              "and": [Function],
              "array": [Function],
              "brand": [Function],
              "catch": [Function],
              "default": [Function],
              "describe": [Function],
              "isNullable": [Function],
              "isOptional": [Function],
              "nullable": [Function],
              "nullish": [Function],
              "optional": [Function],
              "or": [Function],
              "parse": [Function],
              "parseAsync": [Function],
              "pipe": [Function],
              "promise": [Function],
              "readonly": [Function],
              "refine": [Function],
              "refinement": [Function],
              "safeParse": [Function],
              "safeParseAsync": [Function],
              "spa": [Function],
              "superRefine": [Function],
              "transform": [Function],
            },
            "typeName": "ZodEffects",
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "default": [Function],
          "describe": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "promise": [Function],
          "readonly": [Function],
          "refine": [Function],
          "refinement": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
        },
      },
      "name": {
        "hashValue": false,
        "required": true,
        "returned": true,
        "validator": ZodEffects {
          "_def": {
            "description": undefined,
            "effect": {
              "transform": [Function],
              "type": "transform",
            },
            "errorMap": [Function],
            "schema": ZodString {
              "_def": {
                "checks": [],
                "coerce": false,
                "typeName": "ZodString",
              },
              "and": [Function],
              "array": [Function],
              "brand": [Function],
              "catch": [Function],
              "default": [Function],
              "describe": [Function],
              "isNullable": [Function],
              "isOptional": [Function],
              "nullable": [Function],
              "nullish": [Function],
              "optional": [Function],
              "or": [Function],
              "parse": [Function],
              "parseAsync": [Function],
              "pipe": [Function],
              "promise": [Function],
              "readonly": [Function],
              "refine": [Function],
              "refinement": [Function],
              "safeParse": [Function],
              "safeParseAsync": [Function],
              "spa": [Function],
              "superRefine": [Function],
              "transform": [Function],
            },
            "typeName": "ZodEffects",
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "default": [Function],
          "describe": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "promise": [Function],
          "readonly": [Function],
          "refine": [Function],
          "refinement": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
        },
      },
    },
    "modelName": "user",
    "selectFields": [
      "id",
      "email",
      "emailVerified",
      "email",
      "emailVerified",
      "image",
      "name",
    ],
  },
}
`;

exports[`to context > should return a valid context 1`] = `
{
  "_db": {
    "create": [Function],
    "delete": [Function],
    "findMany": [Function],
    "findOne": [Function],
    "update": [Function],
  },
  "account": {
    "additionalFields": {},
    "modelName": "account",
    "selectFields": [
      "userId",
      "providerId",
      "accountId",
    ],
  },
  "adapter": {
    "createSession": [Function],
    "createUser": [Function],
    "deleteSession": [Function],
    "findAccount": [Function],
    "findSession": [Function],
    "findUserByEmail": [Function],
    "findUserById": [Function],
    "linkAccount": [Function],
    "updateSession": [Function],
    "updateUserByEmail": [Function],
  },
  "basePath": "/api/auth",
  "baseURL": "https://better-auth.com",
  "cookies": {
    "csrfToken": {
      "name": "better-auth.csrf_token",
      "options": {
        "httpOnly": true,
        "path": "/",
        "sameSite": "lax",
        "secure": false,
      },
    },
    "nonce": {
      "name": "better-auth.nonce",
      "options": {
        "httpOnly": true,
        "maxAge": 900,
        "path": "/",
        "sameSite": "lax",
        "secure": false,
      },
    },
    "pkCodeVerifier": {
      "name": "better-auth.pk_code_verifier",
      "options": {
        "httpOnly": true,
        "maxAge": 900,
        "path": "/",
        "sameSite": "lax",
        "secure": false,
      },
    },
    "sessionToken": {
      "name": "better-auth.session_token",
      "options": {
        "httpOnly": true,
        "maxAge": 604800000,
        "path": "/",
        "sameSite": "lax",
        "secure": false,
      },
    },
    "state": {
      "name": "better-auth.state",
      "options": {
        "httpOnly": true,
        "maxAge": 900,
        "path": "/",
        "sameSite": "lax",
        "secure": false,
      },
    },
  },
  "disableCSRF": false,
  "plugins": [
    {
      "handler": [Function],
      "hooks": {
        "before": [Function],
        "matcher": [Function],
      },
      "id": "csrf",
      "name": "CSRF Check",
      "version": "1.0.0",
    },
  ],
  "providers": [],
  "request": {
    "action": "signin",
    "body": {
      "provider": "github",
    },
    "cookies": {
      "get": [Function],
      "set": [Function],
    },
    "headers": Headers {
      Symbol(entries): {
        "content-type": {
          "name": "Content-Type",
          "value": [
            "text/plain;charset=UTF-8",
          ],
        },
      },
    },
    "method": "POST",
    "query": {},
    "url": "https://better-auth.com/api/auth",
  },
  "secret": "better-auth-secret-key-123456789",
  "session": {
    "additionalFields": {},
    "expiresIn": 604800000,
    "modelName": "session",
    "selectFields": [
      "id",
      "userId",
      "expiresAt",
    ],
    "updateAge": 86400000,
  },
  "sessionAdapter": undefined,
  "user": {
    "fields": {
      "email": {
        "hashValue": false,
        "required": true,
        "returned": true,
        "validator": ZodEffects {
          "_def": {
            "description": undefined,
            "effect": {
              "transform": [Function],
              "type": "transform",
            },
            "errorMap": [Function],
            "schema": ZodString {
              "_def": {
                "checks": [],
                "coerce": false,
                "typeName": "ZodString",
              },
              "and": [Function],
              "array": [Function],
              "brand": [Function],
              "catch": [Function],
              "default": [Function],
              "describe": [Function],
              "isNullable": [Function],
              "isOptional": [Function],
              "nullable": [Function],
              "nullish": [Function],
              "optional": [Function],
              "or": [Function],
              "parse": [Function],
              "parseAsync": [Function],
              "pipe": [Function],
              "promise": [Function],
              "readonly": [Function],
              "refine": [Function],
              "refinement": [Function],
              "safeParse": [Function],
              "safeParseAsync": [Function],
              "spa": [Function],
              "superRefine": [Function],
              "transform": [Function],
            },
            "typeName": "ZodEffects",
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "default": [Function],
          "describe": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "promise": [Function],
          "readonly": [Function],
          "refine": [Function],
          "refinement": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
        },
      },
      "emailVerified": {
        "hashValue": false,
        "required": true,
        "returned": true,
        "validator": ZodEffects {
          "_def": {
            "description": undefined,
            "effect": {
              "transform": [Function],
              "type": "transform",
            },
            "errorMap": [Function],
            "schema": ZodBoolean {
              "_def": {
                "coerce": false,
                "typeName": "ZodBoolean",
              },
              "and": [Function],
              "array": [Function],
              "brand": [Function],
              "catch": [Function],
              "default": [Function],
              "describe": [Function],
              "isNullable": [Function],
              "isOptional": [Function],
              "nullable": [Function],
              "nullish": [Function],
              "optional": [Function],
              "or": [Function],
              "parse": [Function],
              "parseAsync": [Function],
              "pipe": [Function],
              "promise": [Function],
              "readonly": [Function],
              "refine": [Function],
              "refinement": [Function],
              "safeParse": [Function],
              "safeParseAsync": [Function],
              "spa": [Function],
              "superRefine": [Function],
              "transform": [Function],
            },
            "typeName": "ZodEffects",
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "default": [Function],
          "describe": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "promise": [Function],
          "readonly": [Function],
          "refine": [Function],
          "refinement": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
        },
      },
      "image": {
        "hashValue": false,
        "required": false,
        "returned": true,
        "validator": ZodEffects {
          "_def": {
            "description": undefined,
            "effect": {
              "transform": [Function],
              "type": "transform",
            },
            "errorMap": [Function],
            "schema": ZodString {
              "_def": {
                "checks": [],
                "coerce": false,
                "typeName": "ZodString",
              },
              "and": [Function],
              "array": [Function],
              "brand": [Function],
              "catch": [Function],
              "default": [Function],
              "describe": [Function],
              "isNullable": [Function],
              "isOptional": [Function],
              "nullable": [Function],
              "nullish": [Function],
              "optional": [Function],
              "or": [Function],
              "parse": [Function],
              "parseAsync": [Function],
              "pipe": [Function],
              "promise": [Function],
              "readonly": [Function],
              "refine": [Function],
              "refinement": [Function],
              "safeParse": [Function],
              "safeParseAsync": [Function],
              "spa": [Function],
              "superRefine": [Function],
              "transform": [Function],
            },
            "typeName": "ZodEffects",
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "default": [Function],
          "describe": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "promise": [Function],
          "readonly": [Function],
          "refine": [Function],
          "refinement": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
        },
      },
      "name": {
        "hashValue": false,
        "required": true,
        "returned": true,
        "validator": ZodEffects {
          "_def": {
            "description": undefined,
            "effect": {
              "transform": [Function],
              "type": "transform",
            },
            "errorMap": [Function],
            "schema": ZodString {
              "_def": {
                "checks": [],
                "coerce": false,
                "typeName": "ZodString",
              },
              "and": [Function],
              "array": [Function],
              "brand": [Function],
              "catch": [Function],
              "default": [Function],
              "describe": [Function],
              "isNullable": [Function],
              "isOptional": [Function],
              "nullable": [Function],
              "nullish": [Function],
              "optional": [Function],
              "or": [Function],
              "parse": [Function],
              "parseAsync": [Function],
              "pipe": [Function],
              "promise": [Function],
              "readonly": [Function],
              "refine": [Function],
              "refinement": [Function],
              "safeParse": [Function],
              "safeParseAsync": [Function],
              "spa": [Function],
              "superRefine": [Function],
              "transform": [Function],
            },
            "typeName": "ZodEffects",
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "default": [Function],
          "describe": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "promise": [Function],
          "readonly": [Function],
          "refine": [Function],
          "refinement": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
        },
      },
    },
    "modelName": "user",
    "selectFields": [
      "id",
      "email",
      "emailVerified",
      "email",
      "emailVerified",
      "image",
      "name",
    ],
  },
}
`;
